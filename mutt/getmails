#!/usr/bin/env python3
from datetime import datetime
from os.path import expanduser
from subprocess import call, check_output, Popen
from threading import Thread
from time import sleep
from signal import SIGKILL, SIGTERM
import atexit


VDIRSYNCER_INTERVAL = 1200
VDIRSYNCER_PW = check_output(['pass', 'sogo/user']).decode()[:-1]

CHECK_INTERVAL = 60
ACCOUNTS = [
    ('primarymailbox',
     check_output(['pass', 'foo/bar']).decode()[:-1]),
    ('secondarymailbox',
     check_output(['pass', 'baz/qux']).decode()[:-1]),
]


def offlineimap(account, pw):
    # Writing into a temp file which is deleted by offlineimap hook
    # to prevent invocation of new gpg agent (passwords are store in memory
    # of this process)
    with open(expanduser('~/.tmp_mail{}'.format(account)), 'w') as fh:
        fh.write(pw)
    return Popen(['offlineimap', '-a', account])


def vdirsyncer_oneshot():
    # Writing into a temp file which is deleted by vdirsyncer hook
    # to prevent invocation of new gpg agent (passwords are store in memory
    # of this process)
    with open(expanduser('~/.tmp_vdirsyncer'), 'w') as fh:
        fh.write(VDIRSYNCER_PW)
    try:
        return call(['vdirsyncer', 'sync'])
    except Exception:
        print('vdirsyncer failed')


def vdirsyncer_daemon():
    while True:
        vdirsyncer_oneshot()
        sleep(VDIRSYNCER_INTERVAL)


# Run vdirsyncer thread
vdir = Thread(target=vdirsyncer_daemon)
vdir.start()


processes = []


def spawn_processes():
    for account, pw in ACCOUNTS:
        processes.append(offlineimap(account, pw))
spawn_processes()


def stop_kill_processes():
    global processes

    for p in processes:
        p.send_signal(SIGTERM)
    sleep(15)
    for p in processes:
        p.send_signal(SIGKILL)
    processes = []

interfaces = check_output(['ip', 'a'])
time = datetime.now()
while True:
    sleep(CHECK_INTERVAL)
    new_interfaces = check_output(['ip', 'a'])
    new_time = datetime.now()
    if (new_interfaces != interfaces or
            (new_time - time).total_seconds() > CHECK_INTERVAL + 10):
        print('interfaces have changed or time has skipped. Restarting!')
        stop_kill_processes()
        spawn_processes()

    else:
        print('unchanged')
    interfaces = new_interfaces
    time = datetime.now()  # might have been delayed

def exit():
    print('exiting')
    stop_kill_processes()
atexit.register(exit)
